# Source: g8keeper/templates/backend.yaml
apiVersion: v1
data:
  config.toml: |
    [log]
    level = "info"

    [app]
    name = "backend"
    port = "8080"

    [tinksvc]
    host = "svc-tinksrv-g8k-g8keeper"
    port = "8081"
    kekUri = "mykekuri"

    [database]
    storage = "inmemory"
kind: ConfigMap
metadata:
  name: cm-backend-g8k-g8keeper
  labels:
    chart: g8keeper-0.1.0
---
# Source: g8keeper/templates/tinksrv.yaml
apiVersion: v1
kind: ConfigMap
data:
  config.toml: |
    [log]
    level = "info"

    [app]
    name = "tinksrv"
    port = "8081"

    [kms]
    kekFile = "/run/secrets/keyset.json"
metadata:
  annotations: {}
  name: "cm-tinksrv-g8k-g8keeper"
  labels:
    chart: "g8keeper-0.1.0"
---
# Source: g8keeper/templates/backend.yaml
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    io.kompose.service: backend
    chart: "g8keeper-0.1.0"
  name: "svc-backend-g8k-g8keeper"
spec:
  ports:
    - name: '8080'
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: backend
  sessionAffinity: None
  type: ClusterIP
---
# Source: g8keeper/templates/tinksrv.yaml
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    io.kompose.service: tinksrv
    chart: "g8keeper-0.1.0"
  name: "svc-tinksrv-g8k-g8keeper"
spec:
  ports:
    - name: '8081'
      port: 8081
      targetPort: 8081
  selector:
    io.kompose.service: tinksrv
  type: ClusterIP
---
# Source: g8keeper/templates/backend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: backend
    chart: "g8keeper-0.1.0"
  name: "dplm-backend-g8k-g8keeper"
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: backend
  template:
    metadata:
      labels:
        io.kompose.network/g8keeper-default: 'true'
        io.kompose.service: backend
    spec:
      containers:
        - image: backend
          imagePullPolicy: IfNotPresent
          name: backend
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - mountPath: /configs
              name: vol-cm-backend
      volumes:
        - name: vol-cm-backend
          configMap:
            defaultMode: 420
            name: cm-backend-g8k-g8keeper
---
# Source: g8keeper/templates/tinksrv.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: tinksrv
    chart: "g8keeper-0.1.0"
  name: "dplm-tinksrv-g8k-g8keeper"
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: tinksrv
  template:
    metadata:
      labels:
        io.kompose.network/g8keeper-default: 'true'
        io.kompose.service: tinksrv
    spec:
      containers:
        - image: tinksrv
          imagePullPolicy: IfNotPresent
          name: tinksrv
          ports:
            - containerPort: 8081
              protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - mountPath: "/run/secrets"
              name: vol-sct-tinksrv-kek
            - mountPath: /configs
              name: vol-cm-tinksrv
      volumes:
        - name: vol-sct-tinksrv-kek
          secret:
            defaultMode: 420
            secretName: "sct-tinksrv-g8k-g8keeper"
            items:
              - key: "keyset.json"
                path: "keyset.json"
        - name: vol-cm-tinksrv
          configMap:
            name: "cm-tinksrv-g8k-g8keeper"
            defaultMode: 420
---
# Source: g8keeper/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: g8k-g8keeper
  labels:
    helm.sh/chart: g8keeper-0.1.0
    app.kubernetes.io/name: g8keeper
    app.kubernetes.io/instance: g8k
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: nginx
  rules:
    - host: "g8keeper.localcluster.me"
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: svc-backend-g8k-g8keeper
                port:
                  number: 8080
